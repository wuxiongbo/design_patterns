package refactoring.chapter06.section2.v2;

/**
 * 内联函数
 * <p>
 * 本书经常以简短的函数表现动作意图，这样会使代码更清晰易读。
 * 但有时候你 会遇到某些函数，其内部代码和函数名称同样清晰易读。
 * 也可能你重构了该函数， 使得其内容和其名称变得同样清晰。
 * 果真如此，你就应该去掉这个函数，直接使⽤ 其中的代码。
 * 间接性可能带来帮助，但⾮必要的间接性总是让⼈不舒服。
 * <p>
 * 另⼀种需要使⽤ Inline Method 的情况是：
 * 你⼿上有⼀群组织不甚合理的函数。你可以将它们都内联到⼀个⼤型函数中，再从中提炼出组织合理的⼩型函数。
 * Kent Beck发现，实施 Replace Method with Method Object （135）之前先这么做，往往可以获得不错的效果。
 * 你可以把所要的函数（有着你要的⾏为）的所有调⽤对象的函数内容都内联到函数对象中。
 * ⽐起既要移动⼀个函数、又要移动它所调⽤的其他所有函数，将整个⼤型函数作为整体来移动会⽐较简单。
 * 如果,别⼈使⽤了太多间接层，使得系统中的所有函数都似乎只是对另⼀个函数的简单委托，造成我在这些委托动作之间晕头转向，
 * 那么,我通常都会使⽤Inline Method （117）。
 * 当然，间接层有其价值，但不是所有间接层都有价值。
 * 试着使⽤内联⼿法，我可以找出那些有⽤的间接层，同时,将那些⽆⽤的间接层去除。
 *
 * @author bear
 * @date 2024/2/5 01:24
 * @description
 */
public class Rating {
    int numberOfLateDeliveries;

    int getRating() {
        return (numberOfLateDeliveries > 5) ? 2 : 1;
    }
}
