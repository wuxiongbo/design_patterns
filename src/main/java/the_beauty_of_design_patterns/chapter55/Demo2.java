package the_beauty_of_design_patterns.chapter55;

/**
 * <p>享元模式 在String中的应用</p>
 *
 *
 * 跟 Integer 类的设计思路相似，String 类利用享元模式来复用相同的字符串常量（也就是代码中的“小争哥”）。
 * JVM 会专门开辟一块存储区来存储字符串常量，这块存储区叫作“字符串常量池”。
 *
 * 不过，String 类的享元模式的设计，跟 Integer 类稍微有些不同。
 * Integer 类中要共享的对象，是在类加载的时候，就集中一次性创建好的。
 * 但是，对于字符串来说，我们没法事先知道要共享哪些字符串常量，所以没办法事先创建好，只能在某个字符串常量第一次被用到的时候，存储到 “常量池” 中，
 * 当之后再用到的时候，直接引用常量池中已经存在的即可，就不需要再重新创建了。
 *
 *
 *
 *
 * 实际上，享元模式对 JVM 的垃圾回收并不友好。
 * 因为享元工厂类一直保存了对享元对象的引用，这就导致享元对象在没有任何代码使用的情况下，也并不会被 JVM 垃圾回收机制自动回收掉。
 * 因此，在某些情况下，如果对象的生命周期很短，也不会被密集使用，利用享元模式反倒可能会浪费更多的内存。
 * 所以，除非经过线上验证，利用享元模式真的可以大大节省内存，否则，就不要过度使用这个模式，
 * 为了一点点内存的节省而引入一个复杂的设计模式，得不偿失。
 *
 * <pre>
 * @author wuxiongbo
 * @date 2022/1/10
 * </pre>
 */
public class Demo2 {
    public static void main(String[] args){

        // 常量池
        String s1 = "小争哥";
        String s2 = "小争哥";

        // 新对象
        String s3 = new String("小争哥");

        System.out.println(s1 == s2);  // 指向同一地址值
        System.out.println(s1 == s3);  // 指向不同地址值

    }
}
